meta:
  environment: ~
  service_domain: (( merge ))
  default_quota_definitions:
    default:
      memory_limit: 10240
      total_services: 100
      total_service_keys: 1000
      non_basic_services_allowed: true
      total_routes: 1000
  resource_key: (( merge ))

properties:
  <<: (( merge ))
  app_ssh: ~
  domain: (( merge ))
  ssl:
    skip_cert_verify: (( merge || false ))

  blobstore:
    port: (( merge || 80 ))
    admin_users: (( merge || nil ))
    secure_link:
      secret: (( merge || nil ))
    tls:
      port: (( merge || 443 ))
      cert: ~
      private_key: ~

  loggregator_endpoint:
    shared_secret: (( merge ))

  loggregator:
    <<: (( merge ))
    maxRetainedLogMessages: 100
    debug: (( merge || false ))
    outgoing_dropsonde_port: 8081

  doppler:
    maxRetainedLogMessages: 100
    debug: (( merge || false ))
    # don't allow drains to RFC1918 private networks
    blacklisted_syslog_ranges:
    - start: 10.0.0.0
      end: 10.255.255.255
    - start: 172.16.0.0
      end: 172.31.255.255
    - start: 192.168.0.0
      end: 192.168.255.255

    unmarshaller_count: (( merge || 5 ))
    port: 443

  metron_agent:
    deployment: (( meta.environment ))

  traffic_controller:
    outgoing_port: 8080
    zone: (( merge || nil ))
    disable_access_control: (( merge || nil ))

  collector:
    deployment_name: (( meta.environment ))
    use_newrelic_plugin: true
    newrelic_plugin:
      license_key: (( merge ))
  cc:
    jobs:
      global:
        timeout_in_seconds: 14400 # 4 hours
      app_bits_packer:
        timeout_in_seconds: ~
      app_events_cleanup:
        timeout_in_seconds: ~
      app_usage_events_cleanup:
        timeout_in_seconds: ~
      blobstore_delete:
        timeout_in_seconds: ~
      blobstore_upload:
        timeout_in_seconds: ~
      droplet_deletion:
        timeout_in_seconds: ~
      droplet_upload:
        timeout_in_seconds: ~
      model_deletion:
        timeout_in_seconds: ~
      generic:
        number_of_workers: ~

    app_events:
      cutoff_age_in_days: 31
    app_usage_events:
      cutoff_age_in_days: 31
    audit_events:
      cutoff_age_in_days: 31
    service_usage_events:
      cutoff_age_in_days: 31

    users_can_select_backend: true
    default_to_diego_backend: false
    allow_app_ssh_access: true
    default_app_memory: 512
    default_app_disk_in_mb: 1024
    maximum_app_disk_in_mb: 2048
    client_max_body_size: 1536M

    default_health_check_timeout: 60
    maximum_health_check_timeout: 180

    min_cli_version: ~
    min_recommended_cli_version: ~

    external_host: api
    external_port: 9022
    srv_api_uri: (( "https://" external_host "." meta.service_domain ))

    bulk_api_password: (( merge ))
    internal_api_user: "internal_user"
    internal_api_password: (( bulk_api_password ))

    logging_level: info
    db_logging_level: info

    staging_upload_user: (( merge ))
    staging_upload_password: (( merge ))

    db_encryption_key: (( merge ))

    directories: ~

    disable_custom_buildpacks: false

    broker_client_timeout_seconds: 70
    broker_client_default_async_poll_interval_seconds: (( merge || 60 ))
    broker_client_max_async_poll_duration_minutes: (( merge || 10080 ))

    mutual_tls: ~

    resource_pool:
      blobstore_type: (( merge || "fog" ))
      webdav_config: (( merge || properties.cc.webdav_config ))
      resource_directory_key: (( meta.resource_key "-cc-resources" ))
      fog_aws_storage_options:
        encryption: AES256
      fog_connection: ~
      cdn: ~

    packages:
      blobstore_type: (( merge || "fog" ))
      webdav_config: (( merge || properties.cc.webdav_config ))
      app_package_directory_key: (( meta.resource_key "-cc-packages" ))
      fog_aws_storage_options:
        encryption: AES256
      fog_connection: ~
      cdn: ~
      max_package_size: 1073741824

    droplets:
      blobstore_type: (( merge || "fog" ))
      webdav_config: (( merge || properties.cc.webdav_config ))
      droplet_directory_key: (( meta.resource_key "-cc-droplets" ))
      fog_aws_storage_options:
        encryption: AES256
      fog_connection: ~
      cdn: ~

    development_mode: false

    newrelic:
      license_key: (( merge ))
      environment_name: (( meta.environment ))
      developer_mode: (( cc.development_mode ))
      monitor_mode: true
      capture_params: true
      transaction_tracer:
        enabled: true
        record_sql: "obfuscated"

    buildpacks:
      blobstore_type: (( merge || "fog" ))
      webdav_config: (( merge || properties.cc.webdav_config ))
      buildpack_directory_key: (( meta.resource_key "-cc-buildpacks" ))
      fog_aws_storage_options:
        encryption: AES256
      fog_connection: ~
      cdn: ~
    quota_definitions: (( merge || meta.default_quota_definitions ))
    default_quota_definition: default

    user_buildpacks: (( merge || [] ))
    system_buildpacks: (( merge || default_buildpacks ))
    default_buildpacks:
    - name: staticfile_buildpack
      package: staticfile-buildpack
    - name: java_buildpack
      package: java-buildpack
    - name: ruby_buildpack
      package: ruby-buildpack
    - name: nodejs_buildpack
      package: nodejs-buildpack
    - name: go_buildpack
      package: go-buildpack
    - name: python_buildpack
      package: python-buildpack
    - name: php_buildpack
      package: php-buildpack
    - name: binary_buildpack
      package: binary-buildpack
    - name: dotnet_core_buildpack
      package: dotnet-core-buildpack

    install_buildpacks: (( system_buildpacks user_buildpacks ))

    stacks:
    - name: "cflinuxfs2"
      description: "Cloud Foundry Linux-based filesystem"
    default_stack: "cflinuxfs2"

    # security groups are managed via terraform
    # see terraform/asg.tf in this repo
    security_group_definitions: []
    default_running_security_groups: []
    default_staging_security_groups: []

    allowed_cors_domains: (( merge || [] ))
    thresholds:
      api:
        alert_if_above_mb: ~
        restart_if_consistently_above_mb: ~
        restart_if_above_mb: ~
      worker:
        alert_if_above_mb: ~
        restart_if_consistently_above_mb: ~
        restart_if_above_mb: ~
    external_protocol: "https"

    webdav_config:
      private_endpoint: "https://blobstore.service.cf.internal"
      public_endpoint: (( "http://blobstore." domain || nil))
      username: ((  properties.blobstore.admin_users.[0].username || nil ))
      password: ((  properties.blobstore.admin_users.[0].password || nil ))

    reserved_private_domains: ~

    dea_use_https: false

  login:
    branding: ~
    enabled: true
    analytics:
      code: ~
      domain: ~
    url: (( "https://login." meta.service_domain ))
    uaa_certificate: ~
    protocol: https
    brand: oss
    brand_title: cloud.gov
    uaa_base: ~
    self_service_links_enabled: true
    signups_enabled: true
    invitations_enabled: false
    spring_profiles: ~
    messages: ~

    notifications:
      url: ~

    smtp:
      host: ~
      port: ~
      user: ~
      password: ~
      auth: ~

    links:
      home: (( "https://dashboard." meta.service_domain ))
      passwd: (( "https://login." meta.service_domain "/forgot_password" ))
      signup: (( "https://login." meta.service_domain "/" ))
      network: ~
      signup-network: ~

    logout: ~

    tiles: ~

    saml: ~

    restricted_ips_regex: 10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|169\.254\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}|172\.1[6-9]{1}\.\d{1,3}\.\d{1,3}|172\.2[0-9]{1}\.\d{1,3}\.\d{1,3}|172\.3[0-1]{1}\.\d{1,3}\.\d{1,3}

  uaa:
    ca_cert: (( merge ))
    sslCertificate: (( merge ))
    sslPrivateKey: (( merge ))
    servlet:
      session-cookie:
        max-age: 900 # 15 minutes per FedRAMP requirement

    port: (( merge || 8080 ))

    ssl:
      port: (( merge || 8443 ))

    url: (( "https://uaa." meta.service_domain ))
    issuer: (( url ))

    no_ssl: false

    scim:
      userids_enabled: (( merge || true ))
      users:
      - name: admin
        password: (( merge ))
        groups:
        - scim.write
        - openid
        - scim.read
        - cloud_controller.admin
        - doppler.firehose
      - name: sys-tester
        password: (( merge ))
        groups:
        - scim.write
        - openid
        - scim.read
        - cloud_controller.admin
        - doppler.firehose
      - name: user-tester
        password: (( merge ))
        groups:
        - openid
      - name: broker-deployer
        password: jijiji123
        groups:
        - openid
        - cloud_controller.admin
      groups: ~
      external_groups: ~

    jwt:
      signing_key: (( merge ))
      verification_key: (( merge ))

    cc:
      client_secret: (( merge ))

    admin:
      client_secret: (( merge ))

    authentication:
      policy:
        lockoutAfterFailures: ~
        countFailuresWithinSeconds: ~
        lockoutPeriodSeconds: ~

    login: ~

    ldap: ~

    newrelic: ~

    spring_profiles: ~

    user:
      authorities:
      - openid
      - scim.me
      - cloud_controller.read
      - cloud_controller.write
      - cloud_controller_service_permissions.read
      - password.write
      - scim.userids
      - uaa.user
      - approvals.me
      - oauth.approvals
      - profile
      - roles
      - user_attributes
      - scim.invite

    clients:
      <<: (( merge || nil ))
      login:
        override: true
        scope: openid,oauth.approvals
        authorities: oauth.login,scim.write,clients.read,notifications.write,critical_notifications.write,emails.write,scim.userids,password.write
        secret: (( merge ))
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        redirect-uri: (( properties.login.protocol "://login." meta.service_domain ))
        autoapprove: true
      admin-read-only:
        authorized-grant-types: client_credentials
        authorities: cloud_controller.admin_read_only
        override: true
        secret: secret123
      influxdb-firehose-nozzle:
        access-token-validity: 600
        authorized-grant-types: client_credentials
        override: true
        secret: (( merge ))
        scope: openid,oauth.approvals,doppler.firehose
        authorities: oauth.login,doppler.firehose
      logsearch_firehose_ingestor:
        authorized-grant-types: client_credentials
        authorities: doppler.firehose,cloud_controller.admin_read_only
        override: true
        secret: (( merge ))
      cf:
        id: cf
        secret: ""
        override: true
        authorized-grant-types: password,refresh_token
        scope: cloud_controller.read,cloud_controller.write,openid,password.write,cloud_controller.admin,scim.read,scim.write,doppler.firehose,uaa.user,routing.router_groups.read
        authorities: uaa.none
        access-token-validity: 600
        refresh-token-validity: 259200
        autoapprove: true
      doppler:
        override: true
        authorized-grant-types: client_credentials
        authorities: uaa.resource
        secret: (( merge ))
      cloud_controller_username_lookup:
        authorities: scim.userids
        secret: (( merge ))
        authorized-grant-types: client_credentials
        override: true
      cc_routing:
        authorities: routing.router_groups.read
        secret: (( merge ))
        authorized-grant-types: client_credentials
        override: true
      gorouter:
        authorities: routing.routes.read
        authorized-grant-types: client_credentials
        override: true
        secret: (( merge ))
      tcp_emitter:
        authorities: routing.routes.write,routing.routes.read,routing.router_groups.read
        authorized-grant-types: client_credentials
        secret: (( merge ))
      tcp_router:
        authorities: routing.routes.read,routing.router_groups.read
        authorized-grant-types: client_credentials
        secret: (( merge ))
      ssh-proxy:
        authorized-grant-types: authorization_code
        access-token-validity: 600
        refresh-token-validity: 86400
        autoapprove: true
        override: true
        redirect-uri: (( "https://login." meta.service_domain "/login"))
        scope: openid,cloud_controller.read,cloud_controller.write,cloud_controller.admin
        secret: asldfjaslkdfaosduorqwejkr-ASJDFAKLSDJQWUErjaiosjdfoiajsdfklaj
      uaa_extras_app:
        scope: scim.invite,password.write
        authorized-grant-types: authorization_code,client_credentials
        authorities: scim.read,password.write,uaa.admin
        override: true
        access-token-validity: 600
        refresh-token-validity: 259200
        secret: (( merge ))
        redirect-uri: (( "https://account." meta.service_domain "/oauth/login"))
        name: Invite Users
        autoapprove: true
        show-on-homepage: true
        app-launch-url: (( "https://account." meta.service_domain "/invite"))
        app-icon: 'iVBORw0KGgoAAAANSUhEUgAAAHQAAAB0CAMAAABjROYVAAABwlzhAbiAAAAlXRSTlMAAQIDBAUGBwgJCw0ODxAREhMUFRYXGBkaGxwdHh8gIiMlJicoKSorLC0uLzAxMjM0NTY3ODk7PEFCQ0ZHSUpLTE9QUVJWWFlbXF1fYmRnaWtsbW91d3h5fH6FhomLjI6PkZSVl5qbnZ6go6WmqKqrsLK0t7m6vMDBw8fIz9HT1dfZ2tze4OLk5ujp6+3v8fP19/n7/SSB24YAAAOhSURBVGje7drpXxJBGAfwH6ABFniWpFR2mJZlZdphapl2WGnaoZ12mh0mmUeaKV6ZpmmCz//bC0Ee3IPdZWd90f5e7WeZmS/u7jMzCIAdO3bs2Nmm+JtD0+skNOvToWY/I72vyKK88MTNomWyLEuBDbN4nSzMegAAvMtkaX57ALwki/Mc8JPl8aHZevQqQrGjtfqCPKEpqI3EqH7MxI7qxM9AjTFqGvF62S0e3ROvGsQvdFA8mhe3NtHS7UAvikf3S9BO8WiVBB0Vj3ZKUMoUjs5L0dOizSBJ0X7RaI8MSjkWFUwS+kws+lUWpYBI8yzJo2MCTc+KAkrt4tAQKaF0TJR5l5TRiKDbWk0qKK3mizCPkCpKf0vMN0ujKVCiC2abtRJCilKXw0zS0UVaUBpym2e6h0gFvbmWOLlYZJZZtJgYde2GBM0LRth7uWyOeYWXY7F0j5SH4Cpr0u1Mn3R282IMQg5F9jxrNJ6Vrpk1zob76Yc8Cvcwa7ZyKD3zMJ/ih91QQuF4yB+ylnTMW3ykBw4oo0AVe4ip12WUdL1nw6yd2TipiMI3wZqH/cZM/xQbZMKHVCicb/mbrDRinuKX6/VmHaigQBO/HR36zXu8f2PivCqKYjaPUEjnLjyTbxKS5jZ1NHnGnNO1xubPsa6DSbN4ChSOTtY1ek67eT4qqRTNKFATNbDaJa1jkeotr6ZGkTujeJ0U17FB1mVa8olBA4qMPjbEgoYtW4A/f58yYAQFWvmzfymVWcdbt8o00Iaiglf5E9Ub63jKt3cVMI7CH2ZDjarcWPcoazjpQzooXB/5oqj4aTKXL8UfFNYJzSjQxqfiMvk2xyMpbqdeFCf5iNflWrTw93UCZqDI4TPbG8m1c/Wwl2dVPs/rQpE5wIadKdxSnbPsxS9qq4M+FI7HvAbvsNpxJNXyI9Wq0okCDXzscEn89EG+RaB69TF0oyjhu2L6Vu0FvDW8OGnlAMxGsWuKVBPeCfNRZHxWM/syIAIF2pXNNg3djaEo/yNPLh2FOBQ7ZL866t4BkSgQGNhKDhRq7GocBYp6Oflur+aO6aCApz4UJSKKhuo8OrqlhwKANzvbq7NL+qiB2KiN2qiN2uh/hy7EDsrEo+Ux6hdGYkc/fKJN/2SMGsZ9sjwdid8BWJd9wHerzTHA+j81CADXrDWbNh6rVivN2/GHuXLRKnKB/RvE2TBiBTlcv+UrJldWrtife+VmuWDHjh07drYt/wDZpi7rUVKOBQAAAABJRU5ErkJggg=='
      dashboard:
        scope: cloud_controller.admin,cloud_controller.read,cloud_controller.write,openid,scim.read,scim.invite
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        authorities: uaa.none,scim.invite,cloud_controller.admin,scim.read
        override: true
        access-token-validity: 600
        refresh-token-validity: 259200
        secret: (( merge ))
        name: Dashboard
        autoapprove: true
        show-on-homepage: true
        app-icon: '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'
        app-launch-url: (( "https://dashboard." meta.service_domain ))
        redirect-uri: (( "https://dashboard." meta.service_domain "/oauth2callback" ))
      kibana_oauth2_client:
        scope: cloud_controller.read,oauth.approvals,openid,scim.userids
        authorized-grant-types: authorization_code,refresh_token
        authorities: uaa.none
        override: true
        access-token-validity: 600
        refresh-token-validity: 259200
        secret: (( merge ))
        redirect-uri: (( "https://logs." meta.service_domain "/login" ))
        name: Logsearch
        autoapprove: true
      kubernetes-client:
        scope: cloud_controller.admin
        authorized-grant-types: client_credentials
        authorities: cloud_controller.admin
        override: true
        secret: (( merge ))
      admin-ui:
        scope: admin_ui.admin,admin_ui.user,openid
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        authorities: clients.write,cloud_controller.admin,cloud_controller.read,cloud_controller.write,doppler.firehose,openid,scim.read,scim.write
        redirect-uri: (( "https://admin." meta.service_domain "/login" ))
        override: true
        access-token-validity: 600
        refresh-token-validity: 259200
        secret: (( merge ))
        autoapprove: true
      cloud-gov-community:
        scope: openid
        authorized-grant-types: authorization_code,refresh_token
        authorities: uaa.none
        override: true
        access-token-validity: 600
        refresh-token-validity: 259200
        secret: (( merge ))
        redirect-uri: (( "https://community." meta.service_domain "/auth/oauth2_basic/callback" ))
        autoapprove: true
      concourse-broker:
        scope: cloud_controller.read
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        authorities: cloud_controller.admin
        override: true
        access-token-validity: 600
        refresh-token-validity: 259200
        secret: (( merge ))
        redirect-uri: (( "https://concourse-ci." meta.service_domain "/auth/uaa/callback" ))
        autoapprove: true
      uaaproxy:
        scope: openid
        authorized-grant-types: authorization_code,refresh_token
        authorities: uaa.none
        override: true
        access-token-validity: 600
        refresh-token-validity: 259200
        secret: (( merge ))
        redirect-uri: "https://**.18f.gov/auth/callback,https://**.app.cloud.gov/auth/callback"
        autoapprove: true
      sandbox-bot:
        authorized-grant-types: client_credentials
        authorities: cloud_controller.admin,cloud_controller.read,cloud_controller.write,openid,scim.read
        override: true
        secret: (( merge ))
      uaa-token-audit:
        authorized-grant-types: client_credentials
        authorities: scim.read,tokens.list,uaa.admin
        override: true
        secret: (( merge ))
      firehose_exporter:
        override: true
        authorized-grant-types: client_credentials
        authorities: doppler.firehose
        secret: (( merge ))
      # used to apply CF terraform; see terraform/ subdirectory in this repo
      terraform:
        override: true
        authorized-grant-types: client_credentials
        authorities: cloud_controller.admin
        secret: terraformjijiji

    database: ~

    restricted_ips_regex: 10\.\d{1,3}\.\d{1,3}\.\d{1,3}|192\.168\.\d{1,3}\.\d{1,3}|169\.254\.\d{1,3}\.\d{1,3}|127\.\d{1,3}\.\d{1,3}\.\d{1,3}|172\.1[6-9]{1}\.\d{1,3}\.\d{1,3}|172\.2[0-9]{1}\.\d{1,3}\.\d{1,3}|172\.3[0-1]{1}\.\d{1,3}\.\d{1,3}

    zones:
      internal:
        hostnames:
          - uaa.service.cf.internal
    authentication:
      policy:
        lockoutAfterFailures: 3 # Lock after 3 attempts to match FedRAMP requirement
        countFailuresWithinSeconds: 3600
        lockoutPeriodSeconds: 300

    password:
      policy:
        minLength: 20
        requireUpperCaseCharacter: 1
        requireLowerCaseCharacter: 1
        requireDigit: 1
        requireSpecialCharacter: 1
        expirePasswordInMonths: 6

  statsd_injector:
    deployment: (( meta.environment ))

  metron_agent:
    deployment: (( meta.environment ))
    dropsonde_incoming_port: 3457

  newrelic: ~

  smoke_tests:
    <<: (( merge ))
    backend: diego

  acceptance_tests:
    <<: (( merge ))
    backend: diego
    admin_user: sys-tester
    existing_user: user-tester
    include_apps: true
    include_services: true
    include_internet_dependent: true
    include_tasks: true
    include_diego_ssh: true
    include_diego_docker: true
    include_route_services: true
    include_routing_api: true
    include_sso: true
