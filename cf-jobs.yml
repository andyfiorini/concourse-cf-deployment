empty_hash: {}

networks: (( merge ))

meta:
  environment: ~

  app_domains: (( merge ))

  service_domain: (( merge ))

  release:
    name: cf
  capi_release:
    name: cf
  consul_release:
    name: cf
  etcd_release:
    name: cf

  custom_release:
    name: uaa-customized

  consul_servers: (( jobs.consul_z1.networks.cf1.static_ips jobs.consul_z2.networks.cf2.static_ips ))

  networks:
    z1:
      apps: cf1

    z2:
      apps: cf2

  nfs_client_ranges:
    - (( .networks.cf1.subnets.[0].range || nil ))
    - (( .networks.cf2.subnets.[0].range || nil ))

  nfs_server:
    address: (( jobs.nfs_z1.networks.cf1.static_ips.[0] || nil ))
    allow_from_entries: (( merge || meta.nfs_client_ranges ))
    share: ~
    share_path: (( merge || "" ))

  api_routes:
  - name: api
    tags:
      component: CloudController
    port: (( .properties.cc.external_port ))
    registration_interval: 20s
    uris:
    - (( "api." .properties.domain ))
    - (( "api." .meta.service_domain ))

  api_consul_services:
    cloud_controller_ng: {}

  api_z1_templates:
  - name: consul_agent
    release: (( meta.consul_release.name ))
  - name: cloud_controller_ng
    release: (( meta.capi_release.name ))
  - name: statsd_injector
    release: (( meta.release.name ))
  - name: route_registrar
    release: (( meta.release.name ))
    consumes:
      nats:
        from: nats_z1
  - {name: java-buildpack, release: java-buildpack}
  - {name: go-buildpack, release: go-buildpack}
  - {name: binary-buildpack, release: binary-buildpack}
  - {name: nodejs-buildpack, release: nodejs-buildpack}
  - {name: ruby-buildpack, release: ruby-buildpack}
  - {name: php-buildpack, release: php-buildpack}
  - {name: python-buildpack, release: python-buildpack}
  - {name: staticfile-buildpack, release: staticfile-buildpack}
  - {name: dotnet-core-buildpack, release: dotnet-core-buildpack}

  api_z2_templates:
  - name: consul_agent
    release: (( meta.consul_release.name ))
  - name: cloud_controller_ng
    release: (( meta.capi_release.name ))
  - name: statsd_injector
    release: (( meta.release.name ))
  - name: route_registrar
    release: (( meta.release.name ))
    consumes:
      nats:
        from: nats_z2
  - {name: java-buildpack, release: java-buildpack}
  - {name: go-buildpack, release: go-buildpack}
  - {name: binary-buildpack, release: binary-buildpack}
  - {name: nodejs-buildpack, release: nodejs-buildpack}
  - {name: ruby-buildpack, release: ruby-buildpack}
  - {name: php-buildpack, release: php-buildpack}
  - {name: python-buildpack, release: python-buildpack}
  - {name: staticfile-buildpack, release: staticfile-buildpack}
  - {name: dotnet-core-buildpack, release: dotnet-core-buildpack}

  api_worker_z1_templates:
  - name: consul_agent
    release: (( meta.consul_release.name ))
  - name: cloud_controller_worker
    release: (( meta.capi_release.name ))

  api_worker_z2_templates:
  - name: consul_agent
    release: (( meta.consul_release.name ))
  - name: cloud_controller_worker
    release: (( meta.capi_release.name ))

  clock_z1_templates:
  - name: cloud_controller_clock
    release: (( meta.capi_release.name ))

  clock_z2_templates:
  - name: cloud_controller_clock
    release: (( meta.capi_release.name ))

  nats_z1_templates:
  - name: nats
    release: (( meta.release.name ))
    provides:
      nats:
        as: nats_z1
    consumes:
      nats:
        from: nats_z1

  nats_z2_templates:
  - name: nats
    release: (( meta.release.name ))
    provides:
      nats:
        as: nats_z2
    consumes:
      nats:
        from: nats_z2

  router_z1_templates:
  - name: secureproxy
    release: secureproxy
  - name: consul_agent
    release: (( meta.consul_release.name ))
  - name: gorouter
    release: (( meta.release.name ))
    provides:
      gorouter:
        as: router_z1
    consumes:
      nats:
        from: nats_z1

  router_z2_templates:
  - name: secureproxy
    release: secureproxy
  - name: consul_agent
    release: (( meta.consul_release.name ))
  - name: gorouter
    release: (( meta.release.name ))
    provides:
      gorouter:
        as: router_z2
    consumes:
      nats:
        from: nats_z2

  etcd_templates:
  - name: etcd
    release: (( meta.etcd_release.name ))
    consumes: {etcd: nil}
  - name: etcd_metrics_server
    release: (( meta.etcd_release.name ))

  stats_templates:
  - name: collector
    release: (( meta.release.name ))

  blobstore_routes:
  - name: blobstore
    port: (( .properties.blobstore.port ))
    registration_interval: 20s
    tags:
      component: blobstore
    uris:
    - (( "blobstore." .properties.domain ))

  blobstore_templates:
  - name: consul_agent
    release: (( meta.consul_release.name ))
  - name: blobstore
    release: (( meta.capi_release.name ))
  - name: route_registrar
    release: (( meta.release.name ))

  nfs_templates:
  - name: consul_agent
    release: (( meta.consul_release.name ))
  - name: debian_nfs_server
    release: (( meta.capi_release.name ))
  - name: blobstore
    release: (( meta.capi_release.name ))
  - name: route_registrar
    release: (( meta.release.name ))
    consumes:
      nats:
        from: nats_z1

  uaa_routes:
  - name: uaa
    port: (( .properties.uaa.port ))
    registration_interval: 4s
    tags:
      component: uaa
    uris:
    - (( "uaa." .properties.domain ))
    - (( "*.uaa." .properties.domain ))
    - (( "login." .properties.domain ))
    - (( "*.login." .properties.domain ))
    - (( "login." .meta.service_domain ))
    - (( "*.login." .meta.service_domain ))
    - (( "uaa." .meta.service_domain ))
    - (( "*.uaa." .meta.service_domain ))
    # health_check:
    #   name: uaa-healthcheck
    #   script_path: /var/vcap/jobs/uaa/bin/health_check

  uaa_z1_templates:
  - name: uaa
    release: (( meta.release.name ))
    consumes:
      router:
        from: router_z1
  - name: uaa-customized
    release: (( meta.custom_release.name ))
  - name: consul_agent
    release: (( meta.consul_release.name ))
  - name: route_registrar
    release: (( meta.release.name ))
    consumes:
      nats:
        from: nats_z1
  - name: statsd_injector
    release: (( meta.release.name ))

  uaa_z2_templates:
  - name: uaa
    release: (( meta.release.name ))
    consumes:
      router:
        from: router_z2
  - name: uaa-customized
    release: (( meta.custom_release.name ))
  - name: consul_agent
    release: (( meta.consul_release.name ))
  - name: route_registrar
    release: (( meta.release.name ))
    consumes:
      nats:
        from: nats_z2
  - name: statsd_injector
    release: (( meta.release.name ))

  login_templates:
  - name: login
    release: (( meta.release.name ))

  loggregator_templates:
  - name: consul_agent
    release: (( meta.consul_release.name ))
  - name: doppler
    release: (( meta.release.name ))
  - name: syslog_drain_binder
    release: (( meta.release.name ))
  - name: metron_agent
    release: (( meta.release.name ))

  loggregator_trafficcontroller_routes:
  - name: doppler
    port: (( .properties.loggregator.outgoing_dropsonde_port ))
    registration_interval: 20s
    uris:
    - (( "doppler." .properties.domain ))
    - (( "doppler." .meta.service_domain ))
  - name: loggregator
    port: (( .properties.traffic_controller.outgoing_port ))
    registration_interval: 20s
    uris:
    - (( "loggregator." .properties.domain ))
    - (( "loggregator." .meta.service_domain ))

  loggregator_trafficcontroller_z1_templates:
  - name: consul_agent
    release: (( meta.consul_release.name ))
  - name: loggregator_trafficcontroller
    release: (( meta.release.name ))
    consumes: {doppler: nil}
  - name: metron_agent
    release: (( meta.release.name ))
  - name: route_registrar
    release: (( meta.release.name ))
    consumes:
      nats:
        from: nats_z1

  loggregator_trafficcontroller_z2_templates:
  - name: consul_agent
    release: (( meta.consul_release.name ))
  - name: loggregator_trafficcontroller
    release: (( meta.release.name ))
    consumes: {doppler: nil}
  - name: metron_agent
    release: (( meta.release.name ))
  - name: route_registrar
    release: (( meta.release.name ))
    consumes:
      nats:
        from: nats_z2

  consul_templates:
  - name: consul_agent
    release: (( meta.consul_release.name ))

  metron_agent_templates:
  - name: metron_agent
    release: (( meta.release.name ))

jobs:
  - name: consul_z1
    templates: (( merge || meta.consul_templates meta.metron_agent_templates ))
    instances: 2
    persistent_disk_pool: tiny
    resource_pool: large_z1
    default_networks:
      - name: cf1
        static_ips: ~
    networks: (( merge || default_networks ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      consul:
        agent:
          mode: server
      metron_agent:
        zone: z1

  - name: consul_z2
    templates: (( merge || meta.consul_templates  meta.metron_agent_templates ))
    instances: 1
    persistent_disk_pool: tiny
    resource_pool: large_z2
    default_networks:
      - name: cf2
        static_ips: ~
    networks: (( merge || default_networks ))
    update:
      serial: true
      max_in_flight: 1
    properties:
      consul:
        agent:
          mode: server
      metron_agent:
        zone: z2

  - name: nats_z1
    templates: (( merge || meta.nats_z1_templates meta.metron_agent_templates ))
    instances: 1
    resource_pool: medium_z1
    networks:
      - name: cf1
        static_ips: (( merge ))
    properties:
      metron_agent:
        zone: z1
    update: (( merge || empty_hash ))

  - name: nats_z2
    templates: (( merge || meta.nats_z2_templates meta.metron_agent_templates ))
    instances: 1
    resource_pool: medium_z2
    networks:
      - name: cf2
        static_ips: (( merge ))
    properties:
      metron_agent:
        zone: z2
    update: (( merge || empty_hash ))

  - name: etcd_z1
    templates: (( merge || meta.etcd_templates meta.metron_agent_templates ))
    instances: 1
    resource_pool: large_z1
    persistent_disk_pool: small
    networks:
      - name: cf1
        static_ips: (( merge ))
    properties:
      consul:
          agent:
            services:
              etcd:
                name: cf-etcd
      metron_agent:
        zone: z1
    update: (( merge || empty_hash ))

  - name: etcd_z2
    templates: (( merge || meta.etcd_templates meta.metron_agent_templates ))
    instances: 1
    resource_pool: large_z2
    persistent_disk_pool: small
    networks:
      - name: cf2
        static_ips: (( merge ))
    properties:
      consul:
          agent:
            services:
              etcd:
                name: cf-etcd
      metron_agent:
        zone: z2
    update: (( merge || empty_hash ))

  - name: nfs_z1
    templates: (( merge || meta.nfs_templates meta.metron_agent_templates ))
    instances: 0
    resource_pool: large_z1
    persistent_disk_pool: big
    networks:
      - name: cf1
        static_ips: ~
    properties:
      consul:
        agent:
          services:
            blobstore: {}
      metron_agent:
        zone: z1
      route_registrar:
        routes: (( merge || meta.blobstore_routes ))
    update: (( merge || empty_hash ))

  - name: uaa_z1
    templates: (( merge || meta.uaa_z1_templates meta.metron_agent_templates ))
    instances: 1
    resource_pool: large_z1
    networks:
      - name: cf1
    properties:
      consul:
        agent:
          services:
            uaa: {}
      metron_agent:
        zone: z1
      route_registrar:
        routes: (( merge || meta.uaa_routes ))
      uaa:
        proxy:
          servers: (( merge || jobs.router_z1.networks.cf1.static_ips jobs.router_z2.networks.cf2.static_ips))
    update: (( merge || empty_hash ))

  - name: uaa_z2
    templates: (( merge || meta.uaa_z2_templates meta.metron_agent_templates ))
    instances: 1
    resource_pool: large_z2
    networks:
      - name: cf2
    properties:
      consul:
        agent:
          services:
            uaa: {}
      metron_agent:
        zone: z2
      route_registrar:
        routes: (( merge || meta.uaa_routes ))
      uaa:
        proxy:
          servers: (( merge || jobs.router_z1.networks.cf1.static_ips jobs.router_z2.networks.cf2.static_ips))
    update: (( merge || empty_hash ))

  - name: stats_z1
    templates: (( merge || meta.stats_templates meta.metron_agent_templates ))
    instances: 1
    resource_pool: medium_z1
    networks:
      - name: cf1
    properties:
      metron_agent:
        zone: z1
    update: (( merge || empty_hash ))

  - name: api_z1
    templates: (( merge || meta.api_z1_templates meta.metron_agent_templates ))
    instances: 1
    resource_pool: api_z1
    networks:
      - name: cf1
    properties:
      consul:
        agent:
          services: (( merge || meta.api_consul_services ))
      metron_agent:
        zone: z1
      route_registrar:
        routes: (( merge || meta.api_routes ))
      nfs_server: (( meta.nfs_server ))
    update: (( merge || empty_hash ))

  - name: api_z2
    templates: (( merge || meta.api_z2_templates meta.metron_agent_templates ))
    instances: 1
    resource_pool: api_z2
    networks:
      - name: cf2
    properties:
      consul:
        agent:
          services: (( merge || meta.api_consul_services ))
      metron_agent:
        zone: z2
      route_registrar:
        routes: (( merge || meta.api_routes ))
      nfs_server: (( meta.nfs_server ))
    update: (( merge || empty_hash ))

  - name: clock_global
    templates: (( merge || meta.clock_z1_templates meta.metron_agent_templates ))
    instances: 1
    resource_pool: medium_z1
    networks:
    - name: cf1
    properties:
      metron_agent:
        zone: z1
    update: (( merge || empty_hash ))

  - name: api_worker_z1
    templates: (( merge || meta.api_worker_z1_templates meta.metron_agent_templates ))
    instances: 1
    resource_pool: api_worker_z1
    networks:
      - name: cf1
    properties:
      metron_agent:
        zone: z1
      nfs_server: (( meta.nfs_server ))
    update: (( merge || empty_hash ))

  - name: api_worker_z2
    templates: (( merge || meta.api_worker_z2_templates meta.metron_agent_templates ))
    instances: 1
    resource_pool: api_worker_z2
    networks:
      - name: cf2
    properties:
      metron_agent:
        zone: z2
      nfs_server: (( meta.nfs_server ))
    update: (( merge || empty_hash ))

  - name: loggregator_z1
    templates: (( merge || meta.loggregator_templates ))
    instances: 0
    resource_pool: medium_z1
    networks:
      - name: cf1
    properties:
      doppler:
        zone: z1
      metron_agent:
        zone: z1
    update: (( merge || empty_hash ))

  - name: loggregator_z2
    templates: (( merge || meta.loggregator_templates ))
    instances: 0
    resource_pool: medium_z2
    networks:
      - name: cf2
    properties:
      doppler:
        zone: z2
      metron_agent:
        zone: z2
    update: (( merge || empty_hash ))

  - name: doppler_z1
    templates: (( merge || meta.loggregator_templates ))
    instances: 1
    resource_pool: doppler_z1
    networks:
      - name: cf1
    properties:
      doppler:
        zone: z1
      metron_agent:
        zone: z1
      consul:
          agent:
            services:
              doppler:
                name: doppler
                tags:
                - z1
    update: (( merge || empty_hash ))

  - name: doppler_z2
    templates: (( merge || meta.loggregator_templates ))
    instances: 1
    resource_pool: doppler_z2
    networks:
      - name: cf2
    properties:
      doppler:
        zone: z2
      metron_agent:
        zone: z2
      consul:
          agent:
            services:
              doppler:
                name: doppler
                tags:
                - z2
    update: (( merge || empty_hash ))

  - name: loggregator_trafficcontroller_z1
    templates: (( merge || meta.loggregator_trafficcontroller_z1_templates ))
    instances: 1
    resource_pool: medium_z1
    networks:
      - name: cf1
    properties:
      consul:
        agent:
          services:
            loggregator_trafficcontroller: {}
      metron_agent:
        zone: z1
      traffic_controller:
        zone: z1
      route_registrar:
        routes: (( merge || meta.loggregator_trafficcontroller_routes ))
    update: (( merge || empty_hash ))

  - name: loggregator_trafficcontroller_z2
    templates: (( merge || meta.loggregator_trafficcontroller_z2_templates ))
    instances: 1
    resource_pool: medium_z2
    networks:
      - name: cf2
    properties:
      consul:
        agent:
          services:
            loggregator_trafficcontroller: {}
      metron_agent:
        zone: z2
      traffic_controller:
        zone: z2
      route_registrar:
        routes: (( merge || meta.loggregator_trafficcontroller_routes ))
    update: (( merge || empty_hash ))

  - name: router_z1
    templates: (( merge || meta.router_z1_templates meta.metron_agent_templates ))
    instances: 2
    resource_pool: router_z1
    networks:
      - name: cf1
        static_ips: (( merge ))
    properties:
      consul:
        agent:
          services:
            gorouter: {}
      metron_agent:
        zone: z1
    update: (( merge || empty_hash ))

  - name: router_z2
    templates: (( merge || meta.router_z2_templates meta.metron_agent_templates ))
    instances: 1
    resource_pool: router_z2
    networks:
      - name: cf2
        static_ips: (( merge ))
    properties:
      consul:
        agent:
          services:
            gorouter: {}
      metron_agent:
        zone: z2
    update: (( merge || empty_hash ))

  - name: acceptance_tests
    templates:
    - name: acceptance-tests
      release: (( meta.release.name ))
    instances: 1
    resource_pool: small_errand
    lifecycle: errand
    networks:
      - name: cf1

  - name: smoke_tests
    templates:
    - name: smoke-tests
      release: (( meta.release.name ))
    instances: 1
    resource_pool: small_errand
    lifecycle: errand
    networks:
      - name: cf1
    properties: {}

properties:
  <<: (( merge ))
  consul:
    agent:
      domain: cf.internal
      log_level: (( merge || nil ))
      servers:
        lan: (( meta.consul_servers ))
    ca_cert: (( merge ))
    agent_cert: (( merge ))
    agent_key: (( merge ))
    encrypt_keys: (( merge ))
    server_cert: (( merge ))
    server_key: (( merge ))


  dropsonde:
    enabled: true

  support_address: (( merge || "https://docs.cloud.gov" ))
  description: (( merge || "cloud.gov Cloud Foundry" ))
  domain: (( merge ))
  ssl:
    skip_cert_verify: (( merge || false ))
  system_domain: (( domain ))
  system_domain_organization: ~
  app_domains: (( meta.app_domains ))

  disk_quota_enabled: true

  request_timeout_in_seconds: 900

  nats:
    user: (( merge ))
    password: (( merge ))
    port: 4222
    machines: (( jobs.nats_z1.networks.cf1.static_ips jobs.nats_z2.networks.cf2.static_ips ))
    debug: false
    trace: false
    monitor_port: 0
    prof_port: 0

  etcd:
    machines: (( jobs.etcd_z1.networks.cf1.static_ips jobs.etcd_z2.networks.cf2.static_ips ))
    peer_require_ssl: false
    require_ssl: false
    advertise_urls_dns_suffix: (( merge || "etcd.service.cf.internal" ))

  etcd_metrics_server:
    nats:
      machines: (( .properties.nats.machines ))
      username: (( .properties.nats.user ))
      password: (( .properties.nats.password ))

  loggregator:
    <<: (( merge ))
    etcd:
      machines: (( .properties.etcd.machines ))

  loggregator_endpoint:
    shared_secret: (( merge ))

  doppler_endpoint:
    shared_secret: (( .properties.loggregator_endpoint.shared_secret ))

  metron_endpoint:
    shared_secret: (( .properties.loggregator_endpoint.shared_secret ))

  logger_endpoint: ~

  cc: (( merge ))
  ccdb: (( merge ))

  uaa: (( merge ))
  uaadb: (( merge ))

  databases: ~

  login: (( merge ))

  router:
    enable_ssl: (( merge || nil ))
    ssl_cert: (( merge || nil ))
    ssl_key: (( merge || nil ))
    cipher_suites: (( merge || nil ))
    requested_route_registration_interval_in_seconds: 20
    port: 85
    logrotate:
      freq_min: 20
      rotate: 5
      size: 3M
    extra_headers_to_log: null
    require_https: ~
    status:
      user: (( merge ))
      password: (( merge ))
    secure_cookies: false
    route_services_secret: (( merge || nil ))
    route_services_secret_decrypt_only: (( merge || nil ))
    route_services_timeout: (( merge || nil ))
    route_services_recommend_https: (( merge || nil ))
    logrotate: (( merge || nil ))
    extra_headers_to_log: (( merge || nil ))
    debug_addr: (( merge || nil ))
    drain_wait: (( merge || nil ))
    skip_oauth_tls_verification: (( merge || nil ))
    # This must be set to 0 to get the behaivor we want according to the rules outlined here:
    # https://github.com/cloudfoundry-incubator/routing-release#configure-load-balancer-healthchecks-for-gorouter
    # Any other setting and the health check will respond 200 for this period of time, but the router will not actually be up
    # TODO: Revisit this setting once https://github.com/cloudfoundry/gorouter/issues/160 is closed
    load_balancer_healthy_threshold: 0

  routing_api:
    enabled: (( merge || nil ))

  secureproxy:
    listen_port: 80
    proxy_port: 85

    # Expose gorouter health check for ELB
    # For this to work, router.load_balancer_healthy_threshold must be set to 0
    custom_server_config: |-
      server {
        listen 81;
        location / {
          proxy_pass http://localhost:8080/health;
        }
      }

  syslog_daemon_config: ~

  nfs_server: (( meta.nfs_server ))

  collector: (( merge || nil ))

  acceptance_tests: (( merge || nil ))

  smoke_tests: (( merge || nil ))
